/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
// #define BT    1
#define TEST    1

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <1000>;
};

/ {
    behaviors {
        // hm: homerow_mods {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "homerow mods";
        //     #binding-cells = <2>;
        //     tapping-term-ms = <225>;
        //     flavor = "tap-preferred";
        //     bindings = <&kp>, <&kp>;
        // };
        blt: bluetooth_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BLUETOOTH TAP";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&bt_clr0>, <&bt_sel0>;
        };
    };
};

/ {

    macros {
        bt_clr0: bluetooth_clear_0 {
            label = "bluetooth_clear_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &bt BT_SEL 0>
                , <&macro_tap &bt BT_CLR>
                ;
        };

        bt_sel0: bluetooth_select_0 {
            label = "bluetooth_select_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &bt BT_SEL 0>
                ;
        };
    };

    // behaviors {
    //     blt: bluetooth_tap {
    //         compatible = "zmk,behavior-hold-tap";
    //         label = "BLUETOOTH TAP";
    //         #binding-cells = <2>;
    //         tapping-term-ms = <150>;
    //         flavor = "tap-preferred";
    //         bindings = <&bt_clr0>, <&bt_sel0>;
    //     };
    // };

    combos {
        compatible = "zmk,combos";

        // DEFAULT combos
        combo_default_up {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&tog TEST>;
            layers = <0>;
        };
        combo_default_down {
            timeout-ms = <50>;
            key-positions = <0 2>;
            bindings = <&kp C_MUTE>;
            layers = <0>;
        };
        combo_default_left {
            timeout-ms = <50>;
            key-positions = <0 3>;
            bindings = <&kp C_PREV>;
            layers = <0>;
        };
        combo_default_right {
            timeout-ms = <50>;
            key-positions = <0 4>;
            bindings = <&kp C_NEXT>;
            layers = <0>;
        };

        // BT combos
        // combo__bt_up {
        //     timeout-ms = <50>;
        //     key-positions = <0 1>;
        //     bindings = <&tog BT>;
        //     layers = <1>;
        // };
        // combo__bt_down {
        //     timeout-ms = <50>;
        //     key-positions = <0 2>;
        //     bindings = <&bt BT_SEL 1>;
        //     layers = <1>;
        // };
        // combo__bt_left {
        //     timeout-ms = <50>;
        //     key-positions = <0 3>;
        //     bindings = <&bt BT_SEL 0>;
        //     layers = <1>;
        // };
        // combo__bt_right {
        //     timeout-ms = <50>;
        //     key-positions = <0 4>;
        //     bindings = <&bt BT_SEL 2>;
        //     layers = <1>;
        // };

        // TEST combos
        combo__bt_up {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&tog TEST>;
            layers = <1>;
        };
        combo__bt_down {
            timeout-ms = <50>;
            key-positions = <0 2>;
            bindings = <&bt_clr0>;
            layers = <1>;
        };
        combo__bt_left {
            timeout-ms = <50>;
            key-positions = <0 3>;
            bindings = <&mt F G>;
            layers = <1>;
        };
        combo__bt_right {
            timeout-ms = <50>;
            key-positions = <0 4>;
            bindings = <&blt 0 0>;
            layers = <1>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            
            // Key Ordering (based on `input-gpios` indices): Center, Up, Down, Left, Right
            bindings = < 
                &kp C_PLAY_PAUSE 
                &tog TEST 
                &kp C_MUTE 
                &kp C_PREV 
                &kp C_NEXT 
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        // bt_layer {
            
        //     // Key Ordering (based on `input-gpios` indices): Center, Up, Down, Left, Right
        //     bindings = < 
        //         &none 
        //         &tog BT 
        //         &bt BT_SEL 1 
        //         &bt BT_SEL 0 
        //         &bt BT_SEL 2
        //     >;

        // };

        test_layer {
            
            // Key Ordering (based on `input-gpios` indices): Center, Up, Down, Left, Right
            bindings = < 
                &kp A 
                &tog TEST 
                &kp S
                &kp E
                &kp Z
            >;

        };
    };
};