/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define BT      1
#define SYSTEM  2

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <1000>;
};

/ {

    macros {
        // Hold Tap Macros for BT 0
        bt_clr0: bluetooth_clear_0 {
            label = "bluetooth_clear_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &bt BT_SEL 0>
                , <&macro_tap &bt BT_CLR>
                ;
        };

        bt_sel0: bluetooth_select_0 {
            label = "bluetooth_select_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &bt BT_SEL 0>
                ;
        };

        // Hold Tap Macros for BT 1
        bt_clr1: bluetooth_clear_1 {
            label = "bluetooth_clear_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &bt BT_SEL 1>
                , <&macro_tap &bt BT_CLR>
                ;
        };

        bt_sel1: bluetooth_select_1 {
            label = "bluetooth_select_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &bt BT_SEL 1>
                ;
        };

        // Hold Tap Macros for BT 2
        bt_clr2: bluetooth_clear_2 {
            label = "bluetooth_clear_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &bt BT_SEL 2>
                , <&macro_tap &bt BT_CLR>
                ;
        };

        bt_sel2: bluetooth_select_2 {
            label = "bluetooth_select_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &bt BT_SEL 2>
                ;
        };
    };

    behaviors {
        ht_layer: hold_tap_layer_toggle {
            compatible = "zmk,behavior-hold-tap";
            label = "Layer toggle hold tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&tog>, <&tog>;
        };

        ht_bt0: hold_tap_bluetooth_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "BT hold tap 0";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&bt_clr0>, <&bt_sel0>;
        };

        ht_bt1: hold_tap_bluetooth_1 {
            compatible = "zmk,behavior-hold-tap";
            label = "BT hold tap 1";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&bt_clr1>, <&bt_sel1>;
        };

        ht_bt2: hold_tap_bluetooth_2 {
            compatible = "zmk,behavior-hold-tap";
            label = "BT hold tap 2";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&bt_clr2>, <&bt_sel2>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // DEFAULT combos
        combo_default_up {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&ht_layer SYSTEM BT>;
            layers = <0>;
        };
        combo_default_down {
            timeout-ms = <50>;
            key-positions = <0 2>;
            bindings = <&kp C_MUTE>;
            layers = <0>;
        };
        combo_default_left {
            timeout-ms = <50>;
            key-positions = <0 3>;
            bindings = <&kp C_PREV>;
            layers = <0>;
        };
        combo_default_right {
            timeout-ms = <50>;
            key-positions = <0 4>;
            bindings = <&kp C_NEXT>;
            layers = <0>;
        };

        // BT combos
        combo__bt_up {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&tog BT>;
            layers = <1>;
        };
        combo__bt_down {
            timeout-ms = <50>;
            key-positions = <0 2>;
            bindings = <&ht_bt1 0 0>;
            layers = <1>;
        };
        combo__bt_left {
            timeout-ms = <50>;
            key-positions = <0 3>;
            bindings = <&ht_bt0 0 0>;
            layers = <1>;
        };
        combo__bt_right {
            timeout-ms = <50>;
            key-positions = <0 4>;
            bindings = <&ht_bt2 0 0>;
            layers = <1>;
        };

        // System combos
        combo__system_up {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&tog SYSTEM>;
            layers = <2>;
        };
        combo__system_down {
            timeout-ms = <50>;
            key-positions = <0 2>;
            bindings = <&bootloader>;
            layers = <2>;
        };
        combo__system_left {
            timeout-ms = <50>;
            key-positions = <0 3>;
            bindings = <&ext_power EP_ON>;
            layers = <2>;
        };
        combo__system_right {
            timeout-ms = <50>;
            key-positions = <0 4>;
            bindings = <&ext_power EP_TOG>;
            layers = <2>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        // Key Ordering (based on `input-gpios` indices): Center, Up, Down, Left, Right
        // Bindings on non-Center keys here don't matter since bindings are actually set within combos due to
        // how the encoder switch works electrically.

        default_layer {
            bindings = < 
                &kp C_PLAY_PAUSE 
                &tog BT 
                &kp C_MUTE 
                &kp C_PREV 
                &kp C_NEXT 
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        bt_layer {
            bindings = < 
                &kp A   // Do something different? 
                &tog BT 
                &kp B
                &kp C
                &kp D
            >;

        };

        system_layer {
            bindings = < 
                &reset 
                &tog SYSTEM 
                &kp F
                &kp G
                &kp H
            >;

        };
    };
};